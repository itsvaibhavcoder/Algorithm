Explaination :

The basic idea behind the Sieve of Eratosthenes is to start with a list of all numbers from 2 up to a certain limit, and then iteratively remove all multiples of each prime number found. This leaves behind only the prime numbers themselves.

The algorithm works as follows:

1) Create a list of all numbers from 2 to a given limit. Begin with the first prime number, 2.
2) Mark all multiples of 2 in the list as composite (i.e., not prime).
3) Find the next prime number in the list that has not been marked as composite. This is 3.
4) Mark all multiples of 3 in the list as composite.
5) Find the next prime number in the list that has not been marked as composite. This is 5.
6) Mark all multiples of 5 in the list as composite.
7) Repeat steps 6 and 7 until there are no more prime numbers left to mark.
8) The remaining numbers in the list are all prime.

For example, if we want to find all prime numbers up to 30 using the Sieve of Eratosthenes, we would follow these

Steps:

1) Create a list of numbers from 2 to 30: [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]

2) The first prime number is 2, so mark all multiples of 2 as composite: [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30] -> [2, 3, X, 5, X, 7, X, 9, X, 11, X, 13, X, 15, X, 17, X, 19, X, 21, X, 23, X, 25, X, 27, X, 29, X]

3) The next prime number is 3, so mark all multiples of 3 as composite: [2, 3, X, 5, X, 7, X, X, X, 11, X, 13, X, X, X, 17, X, 19, X, X, X, 23, X, X, X, X, X, 29, X]

4) The next prime number is 5, so mark all multiples of 5 as composite: [2, 3, X, 5, X, 7, X, X, X, 11, X, 13, X, X, X, 17, X, 19, X, X, X, 23, X, X, X, X, X, 29, X]

There are no more prime numbers to mark, so the algorithm will stop here .

Code :

class Solution {
public:
    int countPrimes(int n) {
    vector<bool> isPrime(n+1, true); // initialize all numbers as prime
    int count = 0; // initialize count to 0
    
    // perform the sieve of Eratosthenes algorithm
    for (int p = 2; p < n; p++) {
        if (isPrime[p]) { // if p is prime, mark all multiples of p as composite
            count++;
            for (int j = 2*p; j< n; j = j+p) {
                isPrime[j] = false;
            }
        }
    }
    
    return count; // return the count of primes
}
};
